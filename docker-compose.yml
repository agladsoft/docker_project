version: "3.9"
services:
  nifi:
    container_name: nifi_container
    image: apache/nifi:1.19.1
    restart: always
    ports:
      - "8081:8081"
    environment:
      NIFI_WEB_HTTP_PORT: "8081"
      XL_IDP_ROOT_IMPORT: ${DOCKER_PATH_IMPORT_FILES}
      XL_IDP_ROOT_EXPORT: ${DOCKER_PATH_EXPORT_FILES}
      XL_IDP_ROOT_VSK_IMPORT: ${DOCKER_PATH_VSK_IMPORT_FILES}
      XL_IDP_ROOT_VSK_EXPORT: ${DOCKER_PATH_VSK_EXPORT_FILES}
      XL_IDP_ROOT_NW_EXPORT: ${DOCKER_PATH_NW_EXPORT_FILES}
      XL_IDP_ROOT_NW_IMPORT: ${DOCKER_PATH_NW_IMPORT_FILES}
      XL_IDP_ROOT_FTS: ${DOCKER_PATH_FTS_FILES}
      XL_IDP_ROOT_RZHD: ${DOCKER_PATH_RZHD_FILES}
      XL_IDP_ROOT_CRM: ${DOCKER_PATH_CRM_FILES}
      XL_IDP_ROOT_REFERENCE_INN_BY_API: ${DOCKER_PATH_REFERENCE_INN_BY_API_FILES}
      XL_IDP_ROOT_REFERENCE: ${DOCKER_PATH_REFERENCE_FILES}
      XL_IDP_ROOT_RABBITMQ: ${DOCKER_PATH_RABBITMQ_FILES}
    volumes:
      - ${LOCAL_PATH_IMPORT_FILES}:${DOCKER_PATH_IMPORT_FILES}
      - ${LOCAL_PATH_EXPORT_FILES}:${DOCKER_PATH_EXPORT_FILES}
      - ${LOCAL_PATH_VSK_EXPORT_FILES}:${DOCKER_PATH_VSK_EXPORT_FILES}
      - ${LOCAL_PATH_VSK_IMPORT_FILES}:${DOCKER_PATH_VSK_IMPORT_FILES}
      - ${LOCAL_PATH_NW_EXPORT_FILES}:${DOCKER_PATH_NW_EXPORT_FILES}
      - ${LOCAL_PATH_NW_IMPORT_FILES}:${DOCKER_PATH_NW_IMPORT_FILES}
      - ${LOCAL_PATH_FTS_FILES}:${DOCKER_PATH_FTS_FILES}
      - ${LOCAL_PATH_RZHD_FILES}:${DOCKER_PATH_RZHD_FILES}
      - ${LOCAL_PATH_CRM_FILES}:${DOCKER_PATH_CRM_FILES}
      - ${LOCAL_PATH_REFERENCE_INN_BY_API_FILES}:${DOCKER_PATH_REFERENCE_INN_BY_API_FILES}
      - ${LOCAL_PATH_REFERENCE_FILES}:${DOCKER_PATH_REFERENCE_FILES}
      - ${LOCAL_PATH_RABBITMQ_FILES}:${DOCKER_PATH_RABBITMQ_FILES}
      - ./jdbc:/mnt/jdbc
      - ./nifi-conf:/opt/nifi/nifi-current/conf
    networks:
      - db

  postgres:
    container_name: postgres_container
    image: postgres:13.3
    restart: always
    command:
      - "postgres"
      - "-c"
      - "max_connections=500"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=1200s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "log_destination=csvlog"
      - "-c"
      - "logging_collector=on"
      - "-c"
      - "log_directory=pg_log"
      - "-c"
      - "log_filename=postgresql-%Y-%m-%d_%H%M%S.log"
      - "-c"
      - "log_statement=mod"
      - "-c"
      - "log_timezone=Europe/Moscow"
      - "-c"
      - "listen_addresses=*"
      - "-c"
      - "max_replication_slots=10"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "archive_mode=on"
      - "-c"
      - "archive_command='gzip < %p > ${LOCAL_ABSOLUTE_PATH_SCRIPTS}/archivedir/%f.gz'"
      - "-c"
      - "restore_command='cp ${LOCAL_ABSOLUTE_PATH_SCRIPTS}/database_archive/%f %p'"
    environment:
      POSTGRES_DB: "marketing_db"
      POSTGRES_USER: "marketing_admin"
      POSTGRES_PASSWORD: "6QVnYsC4iSzz"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_FTS: ${DOCKER_PATH_FTS_FILES}
    volumes:
      - ${LOCAL_PATH_FTS_SCRIPTS}/bash_dir:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_FTS_FILES}:${DOCKER_PATH_FTS_FILES}
      - .:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketing_admin -d marketing_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - db

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:5.7
    environment:
      PGADMIN_DEFAULT_EMAIL: "marketing_admin@ruscon.com"
      PGADMIN_DEFAULT_PASSWORD: "3hzDXfz8zaFC"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - db

  clickhouse:
    container_name: clickhouse_server
    image: bitnami/clickhouse:22.11.2
    restart: always
    ports:
      - "8123:8123"
    volumes:
      - ./clickhouse:/bitnami/clickhouse
    environment:
      - CLICKHOUSE_ADMIN_USER=admin
      - CLICKHOUSE_ADMIN_PASSWORD=6QVnYsC4iSzz
    networks:
      - db

  dbeaver:
    image: dbeaver/cloudbeaver:23.1.1
    container_name: dbeaver
    restart: always
    ports:
      - "8121:8978"
    volumes:
      - ./workspace:/opt/cloudbeaver/workspace
    networks:
      - db

  liquibase:
    image: liquibase/liquibase:4.18
    container_name: liquibase_container
    depends_on:
      - clickhouse
    volumes:
      - ./liquibase/changelog:/liquibase/changelog
      - ./liquibase/default/cross_check:/liquibase/default/cross_check
      - ./liquibase/default/tables:/liquibase/default/tables
      - ./liquibase/default/views:/liquibase/default/views
      - ./liquibase/crm/tables:/liquibase/crm/tables
      - ./liquibase/crm/views:/liquibase/crm/views
      - ./liquibase/fts/tables:/liquibase/fts/tables
      - ./liquibase/fts/views:/liquibase/fts/views
      - ./liquibase/rzhd/tables:/liquibase/rzhd/tables
      - ./liquibase/rzhd/views:/liquibase/rzhd/views
      - ./liquibase/rzhd/functions:/liquibase/rzhd/functions
      - ./jdbc:/liquibase/drivers
    command:
      --classpath=/liquibase/changelog:/liquibase/drivers/liquibase-clickhouse-0.7.2-shaded.jar
      --url=jdbc:clickhouse://clickhouse:8123/default?user=admin&password=6QVnYsC4iSzz
      --changeLogFile=changelog.xml update
    networks:
      - db

  import_nutep:
    container_name: import_nutep
    restart: always
    ports:
      - "8085:8085"
    volumes:
      - ${LOCAL_PATH_IMPORT_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_IMPORT_FILES}:${DOCKER_PATH_IMPORT_FILES}
    environment:
      XL_IDP_ROOT: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_IMPORT: ${DOCKER_PATH_IMPORT_FILES}
      XL_IMPORT_TERMINAL: nutep
    build:
      context: import_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/_nutep_lines.sh"
    networks:
      - db

  import_nle:
    container_name: import_nle
    restart: always
    ports:
      - "8086:8086"
    volumes:
      - ${LOCAL_PATH_IMPORT_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_IMPORT_FILES}:${DOCKER_PATH_IMPORT_FILES}
    environment:
      XL_IDP_ROOT: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_IMPORT: ${DOCKER_PATH_IMPORT_FILES}
      XL_IMPORT_TERMINAL: nle
    build:
      context: import_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/_nle_lines.sh"
    networks:
      - db

  export_nutep:
    container_name: export_nutep
    restart: always
    ports:
      - "8090:8090"
    volumes:
      - ${LOCAL_PATH_EXPORT_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_EXPORT_FILES}:${DOCKER_PATH_EXPORT_FILES}
    environment:
      XL_IDP_ROOT_EXPORT: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_EXPORT: ${DOCKER_PATH_EXPORT_FILES}
      XL_IMPORT_TERMINAL: nutep
    build:
      context: export_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/_nutep_lines.sh"
    networks:
      - db

  export_nle:
    container_name: export_nle
    restart: always
    ports:
      - "8091:8091"
    volumes:
      - ${LOCAL_PATH_EXPORT_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_EXPORT_FILES}:${DOCKER_PATH_EXPORT_FILES}
    environment:
      XL_IDP_ROOT_EXPORT: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_EXPORT: ${DOCKER_PATH_EXPORT_FILES}
      XL_IMPORT_TERMINAL: nle
    build:
      context: export_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/_nle_lines.sh"
    networks:
      - db

  export_vsk:
    container_name: export_vsk
    restart: always
    ports:
      - "8095:8095"
    volumes:
      - ${LOCAL_PATH_VSK_EXPORT_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_VSK_EXPORT_FILES}:${DOCKER_PATH_VSK_EXPORT_FILES}
    environment:
      XL_IDP_ROOT_VSK_EXPORT: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_VSK_EXPORT: ${DOCKER_PATH_VSK_EXPORT_FILES}
      XL_VSK_EXPORT: vsk
    build:
      context: export_vsk_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/run_export_vsk.sh"
    networks:
      - db

  import_vsk:
    container_name: import_vsk
    restart: always
    ports:
      - "8096:8096"
    volumes:
      - ${LOCAL_PATH_VSK_IMPORT_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_VSK_IMPORT_FILES}:${DOCKER_PATH_VSK_IMPORT_FILES}
    environment:
      XL_IDP_ROOT_VSK_IMPORT: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_VSK_IMPORT: ${DOCKER_PATH_VSK_IMPORT_FILES}
      XL_VSK_IMPORT: vsk
    build:
      context: import_vsk_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/run_import_vsk.sh"
    networks:
      - db

  import_nw:
    container_name: import_nw
    restart: always
    ports:
      - "8097:8097"
    volumes:
      - ${LOCAL_PATH_NW_IMPORT_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_NW_IMPORT_FILES}:${DOCKER_PATH_NW_IMPORT_FILES}
    environment:
      XL_IDP_ROOT_NW_IMPORT: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_NW_IMPORT: ${DOCKER_PATH_NW_IMPORT_FILES}
      XL_NW_IMPORT: pkt
    build:
      context: import_nw_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/run_import_nw.sh"
    networks:
      - db

  export_nw:
    container_name: export_nw
    restart: always
    ports:
      - "8098:8098"
    volumes:
      - ${LOCAL_PATH_NW_EXPORT_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_NW_EXPORT_FILES}:${DOCKER_PATH_NW_EXPORT_FILES}
    environment:
      XL_IDP_ROOT_NW_EXPORT: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_NW_EXPORT: ${DOCKER_PATH_NW_EXPORT_FILES}
      XL_NW_EXPORT: pkt
    build:
      context: export_nw_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/run_export_nw.sh"
    networks:
      - db

  fts:
    container_name: fts
    restart: always
    ports:
      - "8099:8099"
    volumes:
      - ${LOCAL_PATH_FTS_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_FTS_FILES}:${DOCKER_PATH_FTS_FILES}
    environment:
      XL_IDP_ROOT_FTS: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_FTS: ${DOCKER_PATH_FTS_FILES}
    build:
      context: fts_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/run_fts.sh"
    networks:
      - db

  rzhd:
    container_name: rzhd
    restart: always
    ports:
      - "8100:8100"
    volumes:
      - ${LOCAL_PATH_RZHD_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_RZHD_FILES}:${DOCKER_PATH_RZHD_FILES}
    environment:
      XL_IDP_ROOT_RZHD: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_RZHD: ${DOCKER_PATH_RZHD_FILES}
    build:
      context: rzhd_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash/run_rzhd.sh"
    networks:
      - db

  crm:
    container_name: crm
    restart: always
    ports:
      - "8101:8101"
    volumes:
      - ${LOCAL_PATH_CRM_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_CRM_FILES}:${DOCKER_PATH_CRM_FILES}
    environment:
      XL_IDP_ROOT_CRM: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_CRM: ${DOCKER_PATH_CRM_FILES}
    build:
      context: crm
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash/run_crm.sh"
    networks:
      - db

  reference_inn_by_api:
    container_name: reference_inn_by_api
    restart: always
    ports:
      - "8070:8070"
    volumes:
      - ${LOCAL_PATH_REFERENCE_INN_BY_API_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_REFERENCE_INN_BY_API_FILES}:${DOCKER_PATH_REFERENCE_INN_BY_API_FILES}
    environment:
      XL_IDP_PATH_REFERENCE_INN_BY_API_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_REFERENCE_INN_BY_API: ${DOCKER_PATH_REFERENCE_INN_BY_API_FILES}
    build:
      context: reference_inn_by_api
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/_reference.sh"
    networks:
      - db

  reference:
    container_name: reference
    restart: always
    ports:
      - "8087:8087"
    volumes:
      - ${LOCAL_PATH_REFERENCE_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_REFERENCE_FILES}:${DOCKER_PATH_REFERENCE_FILES}
    environment:
      XL_IDP_PATH_REFERENCE_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_REFERENCE: ${DOCKER_PATH_REFERENCE_FILES}
    build:
      context: reference_scripts
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash_dir/_reference.sh"
    networks:
      - db

  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "8150:8150"
    volumes:
      - ${LOCAL_PATH_RABBITMQ_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_RABBITMQ_FILES}:${DOCKER_PATH_RABBITMQ_FILES}
    environment:
      XL_IDP_ROOT_RABBITMQ: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_RABBITMQ: ${DOCKER_PATH_RABBITMQ_FILES}
    build:
      context: RabbitMQ
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "python3 ${DOCKER_PATH_SCRIPTS}/scripts/receive.py"
    networks:
      - db

  service_inn:
    container_name: service_inn
    restart: always
    ports:
      - "8003:8003"
    volumes:
      - ${LOCAL_PATH_SERVICE_INN_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
    environment:
      PATH_TO_DB: ${DOCKER_PATH_SCRIPTS}
    build:
      context: service_inn
      dockerfile: ./Dockerfile
      args:
        DOCKER_PATH_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "python3 ${DOCKER_PATH_SCRIPTS}/main.py"
    networks:
      - db

  service_consignment:
    container_name: service_consignment
    restart: always
    ports:
      - "8004:8004"
    volumes:
      - ${LOCAL_PATH_SERVICE_CONSIGNMENT_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
    environment:
      PATH_TO_DB: ${DOCKER_PATH_SCRIPTS}
    build:
      context: ServiceConsignment
      dockerfile: ./Dockerfile
      args:
        XL_IDP_PATH_DOCKER: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "python3 ${DOCKER_PATH_SCRIPTS}/main.py"
    networks:
      - db

  service_mor:
    container_name: service_mor
    restart: always
    ports:
      - "8005:8005"
    volumes:
      - ${LOCAL_PATH_MORSERVICE_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
    environment:
      XL_IDP_PATH_MORSERVICE: ${DOCKER_PATH_SCRIPTS}
    build:
      context: Morservice
      dockerfile: ./Dockerfile
      args:
        XL_IDP_PATH_DOCKER: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash/run.sh"
    networks:
      - db

  service_parsed:
    container_name: service_parsed
    restart: always
    ports:
      - "8006:8006"
    volumes:
      - ${LOCAL_PATH_MORSERVICE_PARSED_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_MORSERVICE_PARSED_FILES}:${DOCKER_PATH_MORSERVICE_PARSED_FILES}
    environment:
      XL_IDP_PATH_MORSERVICE_PARSED_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_ROOT_MORSERVICE_PARSED: ${DOCKER_PATH_MORSERVICE_PARSED_FILES}
    build:
      context: Morservice_parsed
      dockerfile: ./Dockerfile
      args:
        XL_IDP_PATH_DOCKER: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash/run.sh"
    networks:
      - db

  auto_tracking:
    container_name: auto_tracking
    restart: always
    ports:
      - "8011:8011"
    volumes:
      - ${LOCAL_PATH_AUTO_TRACKING_SCRIPTS}:${DOCKER_PATH_SCRIPTS}
      - ${LOCAL_PATH_AUTO_TRACKING_FILES}:${DOCKER_PATH_AUTO_TRACKING_FILES}
      - ${LOCAL_PATH_IMPORT_FILES}:${DOCKER_PATH_IMPORT_FILES}
      - ${LOCAL_PATH_VSK_IMPORT_FILES}:${DOCKER_PATH_VSK_IMPORT_FILES}
    environment:
      XL_IDP_PATH_AUTO_TRACKING_SCRIPTS: ${DOCKER_PATH_SCRIPTS}
      XL_IDP_PATH_AUTO_TRACKING: ${DOCKER_PATH_AUTO_TRACKING_FILES}
      XL_IDP_PATH_IMPORT: ${DOCKER_PATH_IMPORT_FILES}
      XL_IDP_PATH_VSK_IMPORT: ${DOCKER_PATH_VSK_IMPORT_FILES}
    build:
      context: auto_tracking
      dockerfile: ./Dockerfile
      args:
        XL_IDP_PATH_DOCKER: ${DOCKER_PATH_SCRIPTS}
    command:
      bash -c "sh ${DOCKER_PATH_SCRIPTS}/bash/run_auto_tracking.sh"
    networks:
      - db

networks:
  db:
    driver: bridge